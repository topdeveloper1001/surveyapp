USE [master]
GO
/****** Object:  Database [coylegroup_surveydb]    Script Date: 12/02/2019 12:55:41 ******/
CREATE DATABASE [coylegroup_surveydb]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'coylegroup_surveydb', FILENAME = N'D:\Sql\coylegroup_surveydb.mdf' , SIZE = 73728KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'coylegroup_surveydb_log', FILENAME = N'D:\Sql\coylegroup_surveydb_log.ldf' , SIZE = 8192KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
GO
ALTER DATABASE [coylegroup_surveydb] SET COMPATIBILITY_LEVEL = 130
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [coylegroup_surveydb].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [coylegroup_surveydb] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET ARITHABORT OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [coylegroup_surveydb] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [coylegroup_surveydb] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET  DISABLE_BROKER 
GO
ALTER DATABASE [coylegroup_surveydb] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [coylegroup_surveydb] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [coylegroup_surveydb] SET  MULTI_USER 
GO
ALTER DATABASE [coylegroup_surveydb] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [coylegroup_surveydb] SET DB_CHAINING OFF 
GO
ALTER DATABASE [coylegroup_surveydb] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [coylegroup_surveydb] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [coylegroup_surveydb] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [coylegroup_surveydb] SET QUERY_STORE = OFF
GO
USE [coylegroup_surveydb]
GO
ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
GO
ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
GO
ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
GO
USE [coylegroup_surveydb]
GO
/****** Object:  User [IIS APPPOOL\.NET v4.5]    Script Date: 12/02/2019 12:55:41 ******/
CREATE USER [IIS APPPOOL\.NET v4.5] FOR LOGIN [IIS APPPOOL\.NET v4.5] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [coyledb]    Script Date: 12/02/2019 12:55:41 ******/
CREATE USER [coyledb] FOR LOGIN [coyledb] WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_owner] ADD MEMBER [IIS APPPOOL\.NET v4.5]
GO
ALTER ROLE [db_owner] ADD MEMBER [coyledb]
GO
/****** Object:  Table [dbo].[answers]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[answers](
	[answerid] [int] NOT NULL,
	[answertext] [varchar](max) NULL,
 CONSTRAINT [PK_coursereviewanswers] PRIMARY KEY CLUSTERED 
(
	[answerid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[approvalstatus]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[approvalstatus](
	[approvalstatusid] [tinyint] NULL,
	[approvalstatus] [varchar](50) NULL
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[audit_events]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[audit_events](
	[datestamp] [datetime] NULL,
	[eventtypeid] [tinyint] NULL,
	[userid] [int] NULL,
	[sourceid] [int] NULL,
	[narrative] [varchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[audit_eventtypes]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[audit_eventtypes](
	[eventtypeid] [tinyint] NOT NULL,
	[eventtypename] [varchar](50) NULL,
 CONSTRAINT [PK_audit_eventtypes] PRIMARY KEY CLUSTERED 
(
	[eventtypeid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[classifications]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[classifications](
	[classificationid] [smallint] IDENTITY(1,1) NOT NULL,
	[classificationtitle] [varchar](255) NULL,
	[classificationdesc] [varchar](500) NULL,
	[deleted] [bit] NULL,
 CONSTRAINT [PK_classifications] PRIMARY KEY CLUSTERED 
(
	[classificationid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[clients]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[clients](
	[clientid] [int] IDENTITY(1,1) NOT NULL,
	[clientref] [varchar](50) NULL,
	[clientname] [varchar](255) NULL,
	[address] [varchar](255) NULL,
	[deleted] [bit] NULL,
	[clientdatatable] [varchar](50) NULL,
	[clientdatafolder] [varchar](50) NULL,
	[clientdatasheetname] [varchar](50) NULL,
	[clientdatanumfields] [smallint] NULL,
 CONSTRAINT [PK_db_clients] PRIMARY KEY CLUSTERED 
(
	[clientid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[facilities]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[facilities](
	[facilityid] [int] IDENTITY(1,1) NOT NULL,
	[facilityref] [nchar](10) NULL,
	[facilityname] [varchar](100) NULL,
	[sortorder] [smallint] NULL,
	[active] [bit] NULL,
 CONSTRAINT [PK_facilities] PRIMARY KEY CLUSTERED 
(
	[facilityid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[fileuploads]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[fileuploads](
	[fileid] [int] IDENTITY(1,1) NOT NULL,
	[surveyid] [int] NULL,
	[questionid] [int] NULL,
	[audit_entrydate] [datetime] NULL,
	[audit_entrybyuserid] [int] NULL,
	[audit_lastmodifieddate] [datetime] NULL,
	[audit_lastmodifiedbyuserid] [int] NULL,
	[deleted] [bit] NULL,
	[sourcefilename] [varchar](255) NULL,
	[serverfilename] [varchar](255) NULL,
	[sourceid] [tinyint] NULL,
 CONSTRAINT [PK_surveyuploads] PRIMARY KEY CLUSTERED 
(
	[fileid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[locations]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[locations](
	[locationid] [int] IDENTITY(1,1) NOT NULL,
	[clientid] [int] NULL,
	[businessunit] [varchar](255) NULL,
	[locationname] [varchar](255) NULL,
	[locationaddress] [varchar](255) NULL,
	[deleted] [bit] NULL,
 CONSTRAINT [PK_products] PRIMARY KEY CLUSTERED 
(
	[locationid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[questioncategories]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[questioncategories](
	[questioncatid] [tinyint] IDENTITY(1,1) NOT NULL,
	[questioncatname] [varchar](255) NULL,
	[catnum] [tinyint] NULL,
 CONSTRAINT [PK_questioncategories] PRIMARY KEY CLUSTERED 
(
	[questioncatid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[questions]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[questions](
	[questionid] [int] IDENTITY(1,1) NOT NULL,
	[questiontext] [varchar](255) NULL,
	[sortorder] [int] NULL,
	[templateid] [smallint] NULL,
	[questioncatid] [tinyint] NULL,
	[questiontype] [tinyint] NULL,
	[questionnum] [tinyint] NULL,
 CONSTRAINT [PK_coursereviewquestions] PRIMARY KEY CLUSTERED 
(
	[questionid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[status]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[status](
	[statusid] [tinyint] IDENTITY(1,1) NOT NULL,
	[statusname] [varchar](50) NULL,
	[sortorder] [tinyint] NULL,
 CONSTRAINT [PK_status] PRIMARY KEY CLUSTERED 
(
	[statusid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[surveyanswers]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[surveyanswers](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[audit_entrydate] [datetime] NULL,
	[audit_lastmodifieddate] [datetime] NULL,
	[userid] [int] NULL,
	[surveyid] [int] NULL,
	[questionid] [int] NULL,
	[answerid] [int] NULL,
	[observations] [varchar](max) NULL,
	[classificationid] [smallint] NULL,
 CONSTRAINT [PK_usercoursereviews] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[surveyclientresponses]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[surveyclientresponses](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[audit_entrydate] [datetime] NULL,
	[audit_lastmodifieddate] [datetime] NULL,
	[userid] [int] NULL,
	[surveyid] [int] NULL,
	[questionid] [int] NULL,
	[clientresponse] [varchar](max) NULL,
	[targetdate] [date] NULL,
	[closed] [bit] NULL,
 CONSTRAINT [PK_surveyclientreponses] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[surveys]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[surveys](
	[surveyid] [int] IDENTITY(1,1) NOT NULL,
	[templateid] [smallint] NULL,
	[locationid] [int] NULL,
	[audit_entrydate] [datetime] NULL,
	[audit_entrybyuserid] [int] NULL,
	[audit_lastmodifieddate] [datetime] NULL,
	[audit_lastmodifiedbyuserid] [int] NULL,
	[deleted] [bit] NULL,
	[dateofaudit] [date] NULL,
	[clientcontact] [varchar](255) NULL,
	[sitedesc] [varchar](500) NULL,
	[scopeofwork] [varchar](max) NULL,
	[weatherconditions] [varchar](500) NULL,
	[auditorid] [int] NULL,
	[statusid] [tinyint] NULL,
	[summary] [varchar](max) NULL,
	[audit_clientreviewdate] [datetime] NULL,
	[client_mgruserid] [int] NULL,
	[client_adminuserid] [int] NULL,
	[client_approvalstatusid] [tinyint] NULL,
	[client_approvalcomments] [varchar](max) NULL,
	[client_approveruserid] [int] NULL,
	[client_approvallastupdated] [datetime] NULL,
 CONSTRAINT [PK_surveys] PRIMARY KEY CLUSTERED 
(
	[surveyid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[templates]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[templates](
	[templateid] [smallint] IDENTITY(1,1) NOT NULL,
	[templatename] [varchar](255) NULL,
	[description] [varchar](max) NULL,
	[deleted] [bit] NULL,
 CONSTRAINT [PK_templates] PRIMARY KEY CLUSTERED 
(
	[templateid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO
/****** Object:  Table [dbo].[userroles]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[userroles](
	[userroleid] [tinyint] NOT NULL,
	[userrole] [varchar](50) NULL,
 CONSTRAINT [PK_user_roles] PRIMARY KEY CLUSTERED 
(
	[userroleid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[users]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[users](
	[userid] [int] IDENTITY(1,1) NOT NULL,
	[audit_entrydate] [datetime] NULL,
	[audit_lastmodifieddate] [datetime] NULL,
	[facilityid] [smallint] NULL,
	[deleted] [bit] NULL,
	[firstname] [varchar](255) NULL,
	[lastname] [varchar](255) NULL,
	[apploginname] [varchar](255) NULL,
	[apppassword] [varchar](50) NULL,
	[networkloginname] [varchar](255) NULL,
	[userroleid] [tinyint] NULL,
	[startdate] [date] NULL,
	[leaderuserid] [int] NULL,
	[buddyuserid] [int] NULL,
	[isadmin] [bit] NULL,
	[photo] [varchar](255) NULL,
	[buddyfile] [varchar](255) NULL,
	[employeeid] [varchar](50) NULL,
	[issuperadmin] [bit] NULL,
	[audit_firstlogindate] [datetime] NULL,
	[audit_lastlogindate] [datetime] NULL,
	[inactivedate] [datetime] NULL,
	[isrn] [bit] NULL,
	[emailaddress] [varchar](255) NULL,
	[isnewhire] [bit] NULL,
	[isleader] [bit] NULL,
	[isbuddy] [bit] NULL,
 CONSTRAINT [PK_db_users] PRIMARY KEY CLUSTERED 
(
	[userid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
/****** Object:  Table [dbo].[users_locations]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[users_locations](
	[id] [int] IDENTITY(1,1) NOT NULL,
	[userid] [int] NULL,
	[locationid] [int] NULL,
 CONSTRAINT [PK_user_locations] PRIMARY KEY CLUSTERED 
(
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO
ALTER TABLE [dbo].[audit_events] ADD  CONSTRAINT [DF_audit_events_datestamp]  DEFAULT (getdate()) FOR [datestamp]
GO
ALTER TABLE [dbo].[classifications] ADD  CONSTRAINT [DF_classifications_deleted]  DEFAULT ((0)) FOR [deleted]
GO
ALTER TABLE [dbo].[clients] ADD  CONSTRAINT [DF_clients_deleted]  DEFAULT ((0)) FOR [deleted]
GO
ALTER TABLE [dbo].[facilities] ADD  CONSTRAINT [DF_facilities_active]  DEFAULT ((1)) FOR [active]
GO
ALTER TABLE [dbo].[fileuploads] ADD  CONSTRAINT [DF_fileuploads_audit_entrydate1]  DEFAULT (getdate()) FOR [audit_entrydate]
GO
ALTER TABLE [dbo].[fileuploads] ADD  CONSTRAINT [DF_fileuploads_audit_lastmodifieddate1]  DEFAULT (getdate()) FOR [audit_lastmodifieddate]
GO
ALTER TABLE [dbo].[fileuploads] ADD  CONSTRAINT [DF_surveyuploads_deleted]  DEFAULT ((0)) FOR [deleted]
GO
ALTER TABLE [dbo].[locations] ADD  CONSTRAINT [DF_products_deleted]  DEFAULT ((0)) FOR [deleted]
GO
ALTER TABLE [dbo].[surveyanswers] ADD  CONSTRAINT [DF_usercoursereviews_audit_entrydate]  DEFAULT (getdate()) FOR [audit_entrydate]
GO
ALTER TABLE [dbo].[surveyanswers] ADD  CONSTRAINT [DF_usercoursereviews_audit_lastmodifieddate]  DEFAULT (getdate()) FOR [audit_lastmodifieddate]
GO
ALTER TABLE [dbo].[surveyclientresponses] ADD  CONSTRAINT [DF_surveyclientreponses_audit_entrydate]  DEFAULT (getdate()) FOR [audit_entrydate]
GO
ALTER TABLE [dbo].[surveyclientresponses] ADD  CONSTRAINT [DF_surveyclientreponses_audit_lastmodifieddate]  DEFAULT (getdate()) FOR [audit_lastmodifieddate]
GO
ALTER TABLE [dbo].[surveyclientresponses] ADD  CONSTRAINT [DF_surveyclientresponses_closed]  DEFAULT ((0)) FOR [closed]
GO
ALTER TABLE [dbo].[surveys] ADD  CONSTRAINT [DF_surveys_audit_entrydate]  DEFAULT (getdate()) FOR [audit_entrydate]
GO
ALTER TABLE [dbo].[surveys] ADD  CONSTRAINT [DF_surveys_audit_lastmodifieddate]  DEFAULT (getdate()) FOR [audit_lastmodifieddate]
GO
ALTER TABLE [dbo].[surveys] ADD  CONSTRAINT [DF_surveys_deleted]  DEFAULT ((0)) FOR [deleted]
GO
ALTER TABLE [dbo].[templates] ADD  CONSTRAINT [DF_templates_deleted]  DEFAULT ((0)) FOR [deleted]
GO
ALTER TABLE [dbo].[users] ADD  CONSTRAINT [DF_db_users_audit_entrydate]  DEFAULT (getdate()) FOR [audit_entrydate]
GO
ALTER TABLE [dbo].[users] ADD  CONSTRAINT [DF_db_users_audit_lastmodifieddate]  DEFAULT (getdate()) FOR [audit_lastmodifieddate]
GO
ALTER TABLE [dbo].[users] ADD  CONSTRAINT [DF_db_users_deleted]  DEFAULT ((0)) FOR [deleted]
GO
ALTER TABLE [dbo].[users] ADD  CONSTRAINT [DF_users_isadmin]  DEFAULT ((0)) FOR [isadmin]
GO
ALTER TABLE [dbo].[users] ADD  CONSTRAINT [DF_users_issuperadmin]  DEFAULT ((0)) FOR [issuperadmin]
GO
/****** Object:  StoredProcedure [dbo].[spAdminGetLocation]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spAdminGetLocation]
(
	@locationid INT
)
AS
	BEGIN
			SELECT 
				*
			FROM 
				locations
            WHERE 
				locationid = @locationid

		RETURN
	END






GO
/****** Object:  StoredProcedure [dbo].[spAdminGetUserLocationList]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[spAdminGetUserLocationList]
(
	@userid	INT
)
AS
	BEGIN
	
		SELECT 
			l.locationid,
			c.clientname	AS [Client], 
			l.businessunit	AS [Business Unit],
			l.locationname	AS [Site],
			COALESCE(ul.id,0)	AS [User Site Access],
			'' AS [Add], '' AS [Remove]	-- room to place some buttons
		FROM clients AS c
		LEFT JOIN locations AS l ON (l.clientid = c.clientid AND l.deleted = 0)
		LEFT JOIN users_locations AS ul ON (ul.userid = @userid AND ul.locationid = l.locationid)
		WHERE c.deleted = 0 
		ORDER BY c.clientname ASC, l.businessunit ASC, l.locationname ASC
		
		RETURN
	END

GO
/****** Object:  StoredProcedure [dbo].[spAdminSaveClient]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE [dbo].[spAdminSaveClient]
(
	@clientid			INT				= null,
	@clientref		VARCHAR(255)	= null,
	@clientname	VARCHAR(255)	= null
)
AS
	BEGIN
		
		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.
		
		-- note the way I handle NEW vs EDITS to keep things very consistent is to always just ADD a blank record in the case of a new doc
		-- and then run the update as normal - yes, it's two database calls but very clean code!
		IF @clientid IS NULL OR @clientid = 0
			BEGIN
				-- a new document to be inserted
				INSERT INTO clients (clientref) VALUES (null)	-- a dummy client

				SET @clientid = SCOPE_IDENTITY()	-- get me the new docid please
			END
		
		-- now do the update as normal
		UPDATE 
			clients 
		SET 
			clientref				= @clientref,
			clientname				= @clientname
			
		WHERE 
			clientid = @clientid
		
		SELECT @clientid AS clientid			-- send the new id back to the calling fxn
			
	END





GO
/****** Object:  StoredProcedure [dbo].[spAdminSaveLocation]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE [dbo].[spAdminSaveLocation]
(
	@locationid			INT				= null,
	@clientid			INT				= null,
	@businessunit		VARCHAR(255)	= null,
	@locationname	VARCHAR(255)	= null,
	@locationaddress	VARCHAR(255)	= null
)
AS
	BEGIN
		
		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.
		
		-- note the way I handle NEW vs EDITS to keep things very consistent is to always just ADD a blank record in the case of a new doc
		-- and then run the update as normal - yes, it's two database calls but very clean code!
		IF @locationid IS NULL OR @locationid = 0
			BEGIN
				-- a new document to be inserted
				INSERT INTO locations (clientid) VALUES (null)	-- a dummy client

				SET @locationid = SCOPE_IDENTITY()	-- get me the new docid please
			END
		
		-- now do the update as normal
		UPDATE 
			locations 
		SET 
			clientid				= @clientid,
			businessunit			= @businessunit,
			locationname			= @locationname,
			locationaddress			= @locationaddress
			
		WHERE 
			locationid = @locationid
		
		SELECT @locationid AS locationid	-- send the new id back to the calling fxn
			
	END




GO
/****** Object:  StoredProcedure [dbo].[spAdminSaveUser]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spAdminSaveUser]
(
	@userid				INT				= null,
	@firstname			VARCHAR(255)	= null,
	@lastname			VARCHAR(255)	= null,
	@apploginname		VARCHAR(255)	= null,
	@apppassword		VARCHAR(50)		= null,
	@isnewhire			INT				= null,
	@isleader			INT				= null,
	@isadmin			INT				= null,
	@issuperadmin		INT				= null,
	@emailaddress		VARCHAR(255)	= null
)
AS
	BEGIN
		
		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.
		
		-- note the way I handle NEW vs EDITS to keep things very consistent is to always just ADD a blank record in the case of a new doc
		-- and then run the update as normal - yes, it's two database calls but very clean code!
		IF @userid IS NULL OR @userid = 0
			BEGIN
				-- a new document to be inserted
				INSERT INTO users (firstname) VALUES (null)	-- a dummy user

				SET @userid = SCOPE_IDENTITY()	-- get me the new userid please
			END
		
		-- now do the update as normal
		UPDATE 
			users 
		SET 
			firstname			= @firstname,	
			lastname			= @lastname,	
			apploginname		= @apploginname,	
			isnewhire			= @isnewhire,
			isleader			= @isleader,
			isadmin				= @isadmin,
			issuperadmin		= @issuperadmin,
			emailaddress		= @emailaddress,
			audit_lastmodifieddate		= GETDATE()
		WHERE 
			userid = @userid
		
		-- if the password is blank then leave it be, if not then set/reset it..
		IF (LEN(@apppassword) > 0)
			BEGIN
				UPDATE users 
				SET apppassword	= @apppassword
				WHERE userid = @userid
			END 

		SELECT @userid AS userid	-- send the userid back to the calling fxn
			
	END







GO
/****** Object:  StoredProcedure [dbo].[spAdminSaveUserLocation]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spAdminSaveUserLocation]
(
	@userid			INT	= null,
	@locationid		INT = null
)
AS
	BEGIN
		
		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.
	
		DECLARE @newid INT = null

		
		IF @locationid = -1	-- -1 means add user to all locations
			BEGIN
				-- add user to all active locations
				INSERT INTO users_locations (userid, locationid) 
					SELECT @userid, locationid
					FROM clients AS c
					LEFT JOIN locations AS l ON l.clientid = c.clientid 
					WHERE c.deleted=0 AND l.deleted=0
					AND l.locationid IS NOT NULL	-- only add actual locations/sites
					AND l.locationid NOT IN (		-- don't add locations the user already has access to!
						SELECT locationid FROM users_locations WHERE userid=@userid
					)

			END
		ELSE
			BEGIN
				-- add user to a single location
				INSERT INTO users_locations (userid, locationid) VALUES (@userid, @locationid)
			END 

		SET @newid = SCOPE_IDENTITY()	-- get me the new userid please
			
	END







GO
/****** Object:  StoredProcedure [dbo].[spAdminUserList]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spAdminUserList]
AS
	BEGIN
			SELECT 
				u.userid,
				u.firstname + ' ' + u.lastname AS [User],
				u.emailaddress	AS [EMail Address],
				u.isnewhire	AS [Consultant],
				u.isleader	AS [Client],
				u.isadmin	AS [Admin], 
				u.issuperadmin	AS [Super-Admin],
				'' AS Actions	-- room to place some buttons
			FROM 
				users AS u
			WHERE u.deleted = 0 
			AND u.userid > 1	-- exluse sys-admin
			ORDER BY u.firstname ASC, u.lastname ASC
		RETURN
	END



GO
/****** Object:  StoredProcedure [dbo].[spCheckUserLogin]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spCheckUserLogin]
(
	@apploginname	VARCHAR(255) = Null,
	@apppassword	VARCHAR(255) = Null,
	@isapplicationlogin	BIT = Null
)
AS
	BEGIN

		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.

		-- testing
		/*
		DECLARE 
			@apploginname	VARCHAR(255) = 'liz',
			@apppassword	VARCHAR(255) = '123',
			@isapplicationlogin	BIT = 0
		*/
		IF @isapplicationlogin = 1
			BEGIN
				-- APPLICATION login
				SELECT 
					u.userid
				FROM users AS u
				WHERE u.apploginname = @apploginname
				AND u.apppassword = @apppassword
				/*
				AND (
					COALESCE(DATEDIFF(D, GETDATE(), u.inactivedate), 1) > 0
					OR 
					u.inactivedate = '1-Jan-1900'	-- to handle bad data
				)
				*/
				AND u.deleted = 0
		
			END
		ELSE
			BEGIN
				-- NETWORK Login
				SELECT 
					u.userid
				FROM users AS u
				WHERE u.networkloginname = @apploginname
				/*
				AND (
					COALESCE(DATEDIFF(D, GETDATE(), u.inactivedate), 1) > 0
					OR 
					u.inactivedate = '1-Jan-1900'	-- to handle bad data
				)
				*/
				AND u.deleted = 0
			END 


	END









GO
/****** Object:  StoredProcedure [dbo].[spCreateUserProfile]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spCreateUserProfile]
(
	@userid				INT		= null
)
AS
	BEGIN

		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.

		/*
		-- testing
		DECLARE @userid	INT	= 2206	-- gc

		--UPDATE users SET userroleid=1, isnewhire=1, isleader=0, isbuddy=0, isadmin=0, issuperadmin=0  WHERE userid=@userid
		*/

		/*
		Course Profiles:
			1	New Hire Training
			2	Leader Training
			3	Buddy Training
		*/
		DECLARE
			@courseProfileId_NewHire	TINYINT = 1,
			@courseProfileId_Leader		TINYINT = 2,
			@courseProfileId_Buddy		TINYINT = 3

		DECLARE 
			@newHireStartDate				DATE,
			@isNewHire						BIT,
			@isLeader						BIT,
			@isBuddy						BIT,
			@numCoursesAlreadyInProgressForThisProfile	INT,
			@addUserToCurrentProfile		BIT,
			@currentProfileId				TINYINT = 1	-- start at first profile and stop at last

		-- load up user details
		SELECT 
			@newHireStartDate	= startdate,
			@isNewHire			= isnewhire,
			@isLeader			= isleader,
			@isBuddy			= isbuddy
		FROM users 
		WHERE userid=@userid
		

		/*
			We have 3 profiles for eLearning - New Hire, Leader & Buddy
			For each one, check:
				Does the updated user record have this profile NOW?
				Did the user have it BEFORE?
				Handle cases where they no longer have it but had it before
				or they now have it and had it before 
					and if so, was it used? if so, leave it alone!
		*/

		WHILE @currentProfileId < 4
			BEGIN
				
				-- determine if this user is to have the current profile of eLearning allocated to them
				SET @addUserToCurrentProfile = 
					CASE 
						WHEN @currentProfileId = @courseProfileId_NewHire AND @isNewHire=1 THEN 1
						WHEN @currentProfileId = @courseProfileId_Leader AND @isLeader=1 THEN 1
						WHEN @currentProfileId = @courseProfileId_Buddy AND @isBuddy=1 THEN 1
						ELSE 0
					END 

				-- find out if any level of the current material has been started by this user
				--	we'll use this later to decide if we've to delete this or leave it in place
				SELECT 
					@numCoursesAlreadyInProgressForThisProfile = COUNT(uc.courseid) 
				FROM courseprofiles_courses AS cpc
				LEFT JOIN courses AS c ON c.courseid=cpc.courseid
				LEFT JOIN users_courses AS uc ON (
					uc.courseid = c.courseid
					AND uc.userid=@userid
				)
				WHERE cpc.courseprofileid=@currentProfileId
				AND uc.progresspercent <> 0		-- anything that has been started

				PRINT '@currentProfileId:'
					PRINT @currentProfileId
				PRINT '@numCoursesAlreadyInProgressForThisProfile:'
					PRINT @numCoursesAlreadyInProgressForThisProfile 
				PRINT '@addUserToCurrentProfile:'
					PRINT @addUserToCurrentProfile
				
				-- we only delete the previous profile for this user if they haven't already started it
				--	otherwise we lose the tracking for reporting later
				--	eg: a new hire who becomes a leader and they remove the new hire material
				--		we need it to stay in place for future reporting purposes
				IF @numCoursesAlreadyInProgressForThisProfile=0
					BEGIN
						-- the user doesn't have this profile of elearning currently assigned to them
						--	and they've no record of having started this elearning in the past
						PRINT 'DELETE STORED PROFILE (IF EXISTS)'
						DELETE FROM users_courses 
						WHERE userid=@userid
						AND courseid IN (
							SELECT c.courseid
								FROM courseprofiles_courses AS cpc
								LEFT JOIN courses AS c ON c.courseid=cpc.courseid
								WHERE cpc.courseprofileid=@currentProfileId
						)

						DELETE FROM users_courselevels 
						WHERE userid=@userid
						AND courselevelid IN (
							SELECT DISTINCT c.courselevelid
								FROM courseprofiles_courses AS cpc
								LEFT JOIN courses AS c ON c.courseid=cpc.courseid
								WHERE cpc.courseprofileid=@currentProfileId
						)
					END 
				ELSE
					BEGIN
						PRINT 'USER ALREADY HAS ASSIGNED PROFILE AND HAS STARTED ELEARNING'
					END 


				-- as above, we only allocate the profile of elearning if the user didn't have it before
				-- or did have it and it wasn't yet started..
				IF @addUserToCurrentProfile=1 
					BEGIN
						
						-- re-allocate the training?
						IF @numCoursesAlreadyInProgressForThisProfile=0 
							BEGIN
								PRINT 'ADD USER TO PROFILE NOW'

								-- each set of courses has a series of levels - associate them with the selected user
								INSERT INTO users_courselevels (userid, courselevelid)
									SELECT DISTINCT @userid, c.courselevelid
										FROM courseprofiles_courses AS cpc
										LEFT JOIN courses AS c ON c.courseid=cpc.courseid
										WHERE cpc.courseprofileid=@currentProfileId
	
								-- take the list of courses for the selected profile and associate them with this user
								INSERT INTO users_courses (userid, courseid, locked)
									SELECT @userid, courseid, locked 
									FROM courseprofiles_courses 
									WHERE courseprofileid=@currentProfileId

							END 

						-- unlock starting course levels for this user 
						--	we do this every time even if the user already had this profile just in case the 
						--	start date changed
						UPDATE users_courselevels 
								SET locked=0, audit_unlockdate = @newHireStartDate
								WHERE userid=@userid
								AND courselevelid IN (
									-- this statement gets me a list of all of the levels that have courses unlocked 
									--	(meaning those levels must be unlocked too - at start)
									SELECT DISTINCT c.courselevelid
									FROM courseprofiles_courses AS cpc
									LEFT JOIN courses AS c ON c.courseid=cpc.courseid
									WHERE cpc.courseprofileid=@currentProfileId
									AND cpc.locked=0
								)
					END 

				PRINT ''
				
				SET @currentProfileId = @currentProfileId + 1
			END 

	END




GO
/****** Object:  StoredProcedure [dbo].[spGetClient]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetClient]
(
	@clientid INT
)
AS
	BEGIN
			SELECT 
				*
			FROM 
				clients
            WHERE 
				clientid = @clientid				

		RETURN
	END






GO
/****** Object:  StoredProcedure [dbo].[spGetClientDropdown]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetClientDropdown]
(
	@userid		INT = null
)
AS
	BEGIN

		DECLARE @isClient BIT = 0;
		IF @userid IS NOT NULL 
			BEGIN
				SELECT @isClient = isleader FROM users WHERE userid = @userid
			END 

		SELECT DISTINCT
			c.clientname		AS [Client], 
			c.clientid
		FROM 
			clients AS c
		LEFT JOIN locations AS l ON (l.clientid = c.clientid AND l.deleted = 0)
		WHERE c.deleted = 0 
		AND (
			-- providing a userid param - loads only the sites available for that user
			--	a null shows all sites for all clients
			l.locationid IN (
				SELECT locationid FROM users_locations WHERE userid = @userid
			)
			OR @userid IS NULL		-- admin users get all clients for all locations
		)
		ORDER BY c.clientname ASC
		
		RETURN
	END




GO
/****** Object:  StoredProcedure [dbo].[spGetClientList]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetClientList]
(
	@userid		INT = null
)
AS
	BEGIN

		-- testing ..
		/*
		DECLARE 
			@userid		INT = 2
		*/

		DECLARE @isClient BIT = 0;
		IF @userid IS NOT NULL 
			BEGIN
				SELECT @isClient = isleader FROM users WHERE userid = @userid
			END 

		SELECT 
			c.clientid,
			c.clientname		AS [Client], 
			l.locationid,
			l.businessunit		AS [Business Unit],
			l.locationname		AS [Site],
			COUNT(s.surveyid)	AS [NumSurveys],
			'' AS Actions	-- room to place some buttons
		FROM 
			clients AS c
		LEFT JOIN locations AS l ON (l.clientid = c.clientid AND l.deleted = 0)
		LEFT JOIN surveys AS s ON (
			s.locationid = l.locationid 
			AND s.deleted = 0
			AND 
			(
				-- only include non-draft/internal surveys on client version
				(s.statusid <> 1 AND s.statusid <> 2)
				OR 
				@isClient = 0
			)	
		)
		WHERE c.deleted = 0 
		AND (
			-- providing a userid loads only the sites available for that user
			--	a null shows all sites for all clients
			l.locationid IN (
				SELECT locationid FROM users_locations WHERE userid = @userid
			)
			OR @userid IS NULL		-- admin users get all clients for all locations
		)
		GROUP BY c.clientid, c.clientname, l.locationid, l.businessunit, l.locationname
		ORDER BY c.clientname ASC, l.businessunit ASC, l.locationname ASC	
		
		RETURN
	END




GO
/****** Object:  StoredProcedure [dbo].[spGetFileUploadsList]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetFileUploadsList]
(
	@surveyid	INT = null,
	@questionid	INT = null,
	@sourceId	TINYINT = null
)
AS
	BEGIN
			SELECT 
				fileid,
				sourcefilename,
				serverfilename,
				'' AS Actions	-- room to place some buttons
			FROM 
				fileuploads
			WHERE surveyid = @surveyid
			AND (questionid=@questionid OR @questionid IS NULL)	-- so I can get a list of all downloads for a survey
			AND sourceid = @sourceId
			AND deleted = 0 
			ORDER BY fileid ASC

		RETURN
	END




GO
/****** Object:  StoredProcedure [dbo].[spGetLocationsDropdown]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetLocationsDropdown]
(
	@clientid	INT = null,
	@userid		INT = null
)
AS
	BEGIN

		SELECT 
			l.businessunit	+ ' - ' + l.locationname,
			l.locationid
		FROM locations AS l 
		WHERE l.deleted = 0 
		AND l.clientid = @clientid
		AND (
			-- providing a userid loads only the sites available for that user
			--	a null shows all sites for all clients
			l.locationid IN (
				SELECT locationid FROM users_locations WHERE userid = @userid
			)
			OR @userid IS NULL		-- admin users get all clients for all locations
		)
		ORDER BY l.businessunit ASC, l.locationname ASC	
		
		RETURN
	END




GO
/****** Object:  StoredProcedure [dbo].[spGetSurvey]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetSurvey]
(
	@surveyid		INT = Null	
)
AS
	BEGIN
		SELECT 
			
			surveyid
      ,templateid
      ,locationid,
	  auditorid
      ,audit_entrydate
      ,audit_entrybyuserid
      ,audit_lastmodifieddate
      ,audit_lastmodifiedbyuserid
      ,deleted
      ,CONVERT(VARCHAR(11), dateofaudit, 106) AS dateofaudit
      ,clientcontact
      ,sitedesc
      ,scopeofwork
      ,weatherconditions 
	  ,statusid,
	  summary,
	  client_mgruserid,
	  client_adminuserid,
	  client_approvalstatusid,
	  client_approvalcomments
		FROM surveys WHERE surveyid = @surveyid
		
		RETURN
	END









GO
/****** Object:  StoredProcedure [dbo].[spGetSurveyAnswers]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetSurveyAnswers]
(
	@surveyid		INT = Null,
	@restricttoanswerid	INT = 0,
	@showunansweredonly	BIT = 0
)
AS

	BEGIN

		-- Testing
		/*
		DECLARE 
			@surveyid		INT = 5,
			@restricttoanswerid	INT = 0,
			@showunansweredonly	BIT = 0
		*/

		SELECT 
			q.questionid,
			q.questiontext,
			q.questiontype,
			q.questionnum,
			t.questioncatname,
			t.catnum,
			a.answerid,
			a.observations,
			a.classificationid
		FROM surveys AS s
		LEFT JOIN questions		AS q ON q.templateid = s.templateid
		LEFT JOIN surveyanswers AS a ON (a.questionid = q.questionid AND a.surveyid = @surveyid)
		LEFT JOIN questioncategories	AS t ON t.questioncatid = q.questioncatid
		WHERE s.surveyid = @surveyid
		AND (a.answerid = @restricttoanswerid OR @restricttoanswerid = 0)
		AND (
			(
			a.answerid IS NULL		-- where question hasn't been answered
			OR
			-- or it has been answered but there are missing details..
			COALESCE(a.classificationid, 0) = 0
			OR
			COALESCE(a.observations, '') = ''
			) 
			OR @showunansweredonly = 0
			 
		)
		ORDER BY q.sortorder ASC
					
		RETURN
	END
	



GO
/****** Object:  StoredProcedure [dbo].[spGetSurveyClientResponses]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetSurveyClientResponses]
(
	@surveyid			INT = Null,
	@showcloseditems	BIT = 0
)
AS

	BEGIN

		-- Testing
		/*		
		DECLARE 
			@surveyid		INT = 5
		*/

		SELECT 
			q.questionid,
			q.questiontext,
			t.questioncatname,
			a.answerid,
			a.observations,
			c.classificationtitle,
			r.clientresponse,
			CONVERT(VARCHAR(11), r.targetdate, 106) AS targetdate,
			r.closed
		FROM surveys AS s
		LEFT JOIN questions		AS q ON q.templateid = s.templateid
		LEFT JOIN surveyanswers AS a ON (a.questionid = q.questionid AND a.surveyid = @surveyid)
		LEFT JOIN questioncategories AS t ON t.questioncatid = q.questioncatid
		LEFT JOIN classifications AS c ON c.classificationid = a.classificationid
		LEFT JOIN surveyclientresponses AS r ON (r.surveyid=s.surveyid AND r.questionid=q.questionid)
		WHERE s.surveyid = @surveyid
		AND a.answerid = 7	-- only the"No" answers
		-- or anything the client has answered previously..TO DO TO DO 
		AND (r.id IS NULL OR r.closed=0 OR @showcloseditems=1)	-- r.id IS NULL means load up the q&a regardless of whether or not there's a client response yet

		ORDER BY q.sortorder ASC
					
		RETURN
	END
	



GO
/****** Object:  StoredProcedure [dbo].[spGetSurveyDetailNumUnanswered]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetSurveyDetailNumUnanswered]
(
	@surveyid INT = null	
)
AS
	BEGIN

		-- testing
		--DECLARE @surveyid INT = 5

		SELECT 
			COUNT(q.questionid)
		FROM surveys AS s
		LEFT JOIN questions AS q ON q.templateid = s.templateid
		LEFT JOIN surveyanswers AS a ON (a.questionid = q.questionid AND a.surveyid = s.surveyid)
		WHERE s.surveyid = @surveyid
		AND (
			a.answerid IS NULL		-- where question hasn't been answered
			OR
			-- or it has been answered but there are missing details..
			COALESCE(a.classificationid, 0) = 0
			OR
			COALESCE(a.observations, '') = ''
		)
		AND COALESCE(a.answerid, 0) <> 8	-- 8: N/A - we allow blank entries for any N/A items

		RETURN
	END
	



GO
/****** Object:  StoredProcedure [dbo].[spGetSurveyList]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetSurveyList]
(
	@locationid	INT = null,
	@userid		INT = null,
	@statusid1	TINYINT = null,
	@statusid2	TINYINT = null

)
AS
	BEGIN

		/*
		-- testing ..
		DECLARE 
			@locationid		INT = null,
			@statusid		TINYINT = null,
			@userid			INT = 3 -- 5=Neil (Client), 3=Derek (Auditor)
		*/

		SELECT 
			s.surveyid,
			CONVERT(VARCHAR(11), s.dateofaudit, 106) 	AS [Date of Audit],
			c.clientname								AS [Client],
			l.locationid,
			l.businessunit								AS [Business Unit],
			l.locationname								AS [Site],
			t.templatename								AS [Audit Type],
			u.firstname + ' ' + u.lastname				AS [Consultant],
			s.statusid,
			st.statusname								AS [Status],
			CONVERT(VARCHAR(11), s.audit_lastmodifieddate, 106) + ' ' + CONVERT(VARCHAR(5), s.audit_lastmodifieddate, 108) AS [Last Modified],
			CONVERT(VARCHAR(11), s.audit_clientreviewdate, 106) AS [ClientReviewDate],
			'' AS Actions	-- room to place some buttons
		FROM surveys AS s
		LEFT JOIN locations AS l ON (l.locationid = s.locationid AND l.deleted=0)
		LEFT JOIN clients AS c ON (c.clientid = l.clientid AND c.deleted=0)
		LEFT JOIN templates AS t ON t.templateid = s.templateid 
		LEFT JOIN users AS u ON u.userid = s.auditorid
		LEFT JOIN status AS st ON st.statusid = s.statusid
		WHERE 
			(s.locationid = @locationid OR @locationid IS NULL)
			AND (
				(s.statusid = @statusid1 OR @statusid1 IS NULL)
				OR (s.statusid = @statusid2 OR @statusid2 IS NULL)
			)
			AND (
				s.locationid IN (
					SELECT locationid FROM users_locations WHERE userid=@userid
				)
				OR @userid IS NULL
			)
			AND s.deleted = 0 
			AND c.clientid IS NOT NULL	-- in case the client was deleted 
		ORDER BY s.dateofaudit DESC
	
		RETURN

	END




GO
/****** Object:  StoredProcedure [dbo].[spGetSurveysDropdown]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spGetSurveysDropdown]
(
	@locationid	INT = null,
	@userid		INT = null
)
AS
	BEGIN

		DECLARE @isClient BIT = 0;
		IF @userid IS NOT NULL 
			BEGIN
				SELECT @isClient = isleader FROM users WHERE userid = @userid
			END 

		SELECT 
			t.templatename + ' - ' + CONVERT(VARCHAR(11), s.dateofaudit, 106),
			s.surveyid
		FROM locations AS l
		LEFT JOIN surveys AS s ON (
			s.locationid = l.locationid 
			AND s.deleted = 0
			AND 
			(
				-- only include non-draft/internal surveys on client version
				(s.statusid <> 1 AND s.statusid <> 2)
				OR 
				@isClient = 0
			)	
		)
		LEFT JOIN templates AS t ON t.templateid = s.templateid
		WHERE l.deleted = 0 
		AND l.locationid = @locationid
		ORDER BY s.dateofaudit DESC
		
		RETURN
	END




GO
/****** Object:  StoredProcedure [dbo].[spGetUser]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spGetUser]
(
	@userid	INT = Null
)
AS
	BEGIN

		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.
		
		SELECT 
			*
		FROM users 
		WHERE userid=@userid
			
	END









GO
/****** Object:  StoredProcedure [dbo].[spReport_AuditTrail]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- remove new stuff when testing..
--DELETE FROM audit_events WHERE eventtypeid = 16

CREATE PROCEDURE [dbo].[spReport_AuditTrail]
(
	@surveyid	INT = null
)
AS
	BEGIN

		/*
		-- testing
		DECLARE @surveyid INT = 5
		*/

		SELECT
			CONVERT(VARCHAR(11), a.datestamp, 106) + ' ' + CONVERT(VARCHAR(5), a.datestamp, 108) AS [Event Date],
			u.firstname + ' ' + u.lastname	AS [User],
			e.eventtypename					AS [Event],
			a.narrative						AS [Details]
		FROM audit_events AS a
		LEFT JOIN audit_eventtypes AS e ON e.eventtypeid = a.eventtypeid
		LEFT JOIN users AS u ON u.userid = a.userid
		WHERE e.eventtypename LIKE 'Audit%'
		AND a.sourceid = @surveyid
		ORDER BY a.datestamp ASC

		RETURN
	END


/*

SELECT
			a.datestamp,
			u.firstname + ' ' + u.lastname,
			e.eventtypename,
			a.narrative,
			a.sourceid,
			userref.firstname + ' ' + userref.lastname AS targetuser,
			locationref.locationname,
			clientref.clientname,
			surveyref.dateofaudit
		FROM audit_events AS a
		LEFT JOIN audit_eventtypes AS e ON e.eventtypeid = a.eventtypeid
		LEFT JOIN users AS u ON u.userid = a.userid
		LEFT JOIN users AS userref ON (userref.userid = a.sourceid AND e.eventtypename LIKE 'user%' )
		LEFT JOIN locations AS locationref ON (locationref.locationid = a.sourceid AND e.eventtypename LIKE 'location%' )
		LEFT JOIN clients AS clientref ON (clientref.clientid = a.sourceid AND e.eventtypename LIKE 'client%' )
		LEFT JOIN surveys AS surveyref ON (surveyref.surveyid = a.sourceid AND e.eventtypename LIKE 'survey%' )
		ORDER BY a.datestamp ASC

*/

GO
/****** Object:  StoredProcedure [dbo].[spReport_ClassificationsSummary]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spReport_ClassificationsSummary]
(
	@userid		INT = 0,
	@clientid INT = 0,
	@locationid	INT = 0,
	@startdate	DATE = '', 
	@enddate	DATE = ''
)
AS

	/*
	-- testing 
	DECLARE 
		@userid		INT = 5,
		@clientid	INT = 3,
		@locationid	INT = 0,
		@startdate	DATE = '', 
		@enddate	DATE = ''
	*/

	BEGIN

		SELECT
			cl.classificationtitle		AS [Classification], 
			COUNT(cl.classificationid)	AS [Number of Occurences]
		FROM surveys AS s
		LEFT JOIN locations AS l ON l.locationid = s.locationid
		LEFT JOIN clients AS c ON c.clientid = l.clientid
		LEFT JOIN surveyanswers AS sa ON sa.surveyid = s.surveyid
		LEFT JOIN classifications AS cl on cl.classificationid = sa.classificationid
		WHERE (c.clientid = @clientid OR @clientid = 0)
		AND (l.locationid = @locationid OR @locationid = 0)
		AND (s.dateofaudit >= @startdate OR @startdate = '')
		AND (s.dateofaudit <= @enddate OR @enddate = '')
		AND (
			-- providing a userid loads only surveys for the the sites that user has access to
			--	a null shows all sites for all clients
			l.locationid IN (
				SELECT locationid FROM users_locations WHERE userid = @userid
			)
			OR @userid = 0		-- admin users get all clients for all locations
		)
		AND s.statusid = 4	-- only "released" audits included
		AND cl.classificationid IS NOT NULL	-- don't include unanswered questions (or classification not set)
		GROUP BY cl.classificationid, cl.classificationtitle
		ORDER BY cl.classificationid ASC	-- sort by id rather than title
		RETURN
	END 



GO
/****** Object:  StoredProcedure [dbo].[spSaveAuditEvent]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

	
CREATE PROCEDURE [dbo].[spSaveAuditEvent]
(
	@userid			INT = Null,
	@eventtypeid	TINYINT	= Null,
	@sourceid		INT = Null,
	@narrative		VARCHAR(MAX) = Null
)
AS
	BEGIN
		
		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.
		
		-- datestamp the event in the audit table
		INSERT INTO audit_events 
			(eventtypeid, userid, sourceid, narrative) 
		VALUES 
			(@eventtypeid, @userid, @sourceid, @narrative) 
	
	END






GO
/****** Object:  StoredProcedure [dbo].[spSaveFileUpload]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveFileUpload]
(
	@fileid			INT				= null,
	@surveyid		INT				= null,
	@questionid		INT				= null,
	@sourceid		TINYINT			= null,
	@userid			INT				= null,
	@sourcefilename	VARCHAR(255)	= null,
	@serverfilename	VARCHAR(255)	= null
)
AS
	BEGIN
		
		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.
		
		-- always just ADD a blank record in the case of a new doc
		IF @fileid IS NULL OR @fileid = 0
			BEGIN
				INSERT INTO fileuploads (audit_entrybyuserid) VALUES (@userid)	

				SET @fileid = SCOPE_IDENTITY()	-- get me the new id please
			END
		
		-- now do the update as normal
		UPDATE 
			fileuploads
		SET 
			surveyid		= @surveyid,
			questionid		= @questionid,	
			sourceid		= @sourceid,
			sourcefilename = @sourcefilename,
			serverfilename	= @serverfilename,
			audit_lastmodifiedbyuserid	= @userid,
			audit_lastmodifieddate		= GETDATE()
		WHERE 
			fileid = @fileid
		
		SELECT @fileid AS fileid			-- send the id back to the calling fxn
			
	END





GO
/****** Object:  StoredProcedure [dbo].[spSaveSurvey]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveSurvey]
(
	@surveyid		INT				= null,
	@templateid		INT				= null,
	@userid			INT				= null,
	@locationid		INT				= null,
	@auditorid		INT				= null,
	@dateofaudit	DATE			= null,
	@clientcontact	VARCHAR(255)	= null,
	@sitedesc		VARCHAR(500)	= null,
	@scopeofwork	VARCHAR(MAX)	= null,
	@weatherconditions VARCHAR(500)	= null,
	@statusid		INT				= null,
	@summary		VARCHAR(MAX)	= null,
	@client_mgruserid INT = null,
	@client_adminuserid INT = null
)
AS
	BEGIN
		
		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.
		
		-- always just ADD a blank record in the case of a new doc
		IF @surveyid IS NULL OR @surveyid = 0
			BEGIN
				INSERT INTO surveys (audit_entrybyuserid) VALUES (@userid)	

				SET @surveyid = SCOPE_IDENTITY()	-- get me the new id please
			END
		
		-- now do the update as normal
		UPDATE 
			surveys
		SET 
			templateid			= @templateid,
			locationid			= @locationid,
			auditorid			= @auditorid,
			dateofaudit			= @dateofaudit,
			clientcontact		= @clientcontact,
			sitedesc			= @sitedesc, 
			scopeofwork			= @scopeofwork,
			weatherconditions	= @weatherconditions,
			statusid			= @statusid,
			summary				= @summary,
			client_mgruserid	= @client_mgruserid,
			client_adminuserid	= @client_adminuserid,
			audit_lastmodifiedbyuserid	= @userid,
			audit_lastmodifieddate		= GETDATE()
		WHERE 
			surveyid = @surveyid
		
		-- when we go to "for client review", set the date this happened so we can age these on the front-end
		IF @statusid = 3	-- "3: for client review"
			BEGIN
				UPDATE 
					surveys
				SET 
					audit_clientreviewdate = GETDATE() 
				WHERE 
					surveyid = @surveyid
					AND audit_clientreviewdate IS NULL	-- only set it once!
			END 

		SELECT @surveyid AS surveyid			-- send the id back to the calling fxn
			
	END





GO
/****** Object:  StoredProcedure [dbo].[spSaveSurveyAnswer]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[spSaveSurveyAnswer]
(
	@surveyid		INT		= null,
	@userid			INT		= null,
	@questionid		INT		= null,
	@answerid		INT		= null,
	@observations	VARCHAR(MAX) = Null,
	@classificationid	SMALLINT = Null
)
AS
	BEGIN
		
		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.
		
		DECLARE @id	INT = Null

		-- get me the record that needs to be updated
		--	 this loads the answer regardless of who actually answered it in the first place (meaning we only store ONE answer)
		SELECT @id = id FROM surveyanswers WHERE surveyid=@surveyid AND questionid=@questionid

		-- make sure to add a new record if there's nothing on file to update..
		IF (@id IS NULL) 
			BEGIN
				-- a new record to be inserted
				INSERT INTO surveyanswers (userid) VALUES (@userid)	-- a dummy record

				SET @id = SCOPE_IDENTITY()	-- get me the new userid please
			END 
		
		-- update as normal
		UPDATE 
			surveyanswers
		SET 
			surveyid	= @surveyid,
			userid		= @userid,
			questionid	= @questionid,
			answerid	= 
				-- only change the answer if a new one has been provided (null => leave as-is)
				CASE 
					WHEN @answerid IS NULL THEN answerid
					ELSE @answerid
				END,
			observations = 
				-- only change the answer if a new one has been provided (null => leave as-is)
				CASE	
					WHEN @observations IS NULL THEN observations
					ELSE @observations
				END,
			classificationid = 
				-- only change the answer if a new one has been provided (null => leave as-is)
				CASE	
					WHEN @classificationid IS NULL THEN classificationid
					ELSE @classificationid
				END,
			audit_lastmodifieddate	= GETDATE()
		WHERE 
			id = @id

		SELECT @id AS id	-- send the id back to the calling fxn
			
	END







GO
/****** Object:  StoredProcedure [dbo].[spSaveSurveyClientApproval]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveSurveyClientApproval]
(
	@surveyid		INT				= null,
	@client_approvalstatusid INT = null,
	@client_approvalcomments VARCHAR(MAX)	= null,
	@client_approveruserid			INT				= null
)
AS
	BEGIN
		
		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.
		
		-- now do the update as normal
		UPDATE 
			surveys
		SET 
			client_approvalstatusid	= @client_approvalstatusid,
			client_approvalcomments	= @client_approvalcomments,
			client_approveruserid	= @client_approveruserid,
			client_approvallastupdated = GETDATE()
		WHERE 
			surveyid = @surveyid
		
		SELECT @surveyid AS surveyid			-- send the id back to the calling fxn
			
	END





GO
/****** Object:  StoredProcedure [dbo].[spSaveSurveyClientResponse]    Script Date: 12/02/2019 12:55:41 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[spSaveSurveyClientResponse]
(
	@surveyid		INT		= null,
	@userid			INT		= null,
	@questionid		INT		= null,
	@clientresponse	VARCHAR(MAX) = Null,
	@targetdate		DATE = null,
	@closeitem		BIT = null
)
AS
	BEGIN
		
		SET NOCOUNT ON						-- added to prevent extra result sets from interfering with SELECT statements.
		
		DECLARE @id	INT = Null

		-- get me the record that needs to be updated
		--	 this loads the answer regardless of who actually answered it in the first place (meaning we only store ONE answer)
		SELECT @id = id FROM surveyclientresponses WHERE surveyid=@surveyid AND questionid=@questionid

		-- make sure to add a new record if there's nothing on file to update..
		IF (@id IS NULL) 
			BEGIN
				-- a new record to be inserted
				INSERT INTO surveyclientresponses (userid) VALUES (@userid)	-- a dummy record

				SET @id = SCOPE_IDENTITY()	-- get me the new userid please
			END 
		
		-- update as normal
		UPDATE 
			surveyclientresponses
		SET 
			surveyid	= @surveyid,
			userid		= @userid,
			questionid	= @questionid,
			clientresponse = 
				-- only change the answer if a new one has been provided (null => leave as-is)
				CASE	
					WHEN @clientresponse IS NULL THEN clientresponse
					ELSE @clientresponse
				END,
			targetdate = 
				-- only change the answer if a new one has been provided (null => leave as-is)
				-- also account for blanks (which default to 1900), setting them back to null
				CASE	
					WHEN @targetdate IS NULL THEN targetdate
					WHEN @targetdate = '' THEN Null
					ELSE @targetdate 
				END,

			closed = 
				-- only change the answer if a new one has been provided (null => leave as-is)
				CASE	
					WHEN @closeitem IS NULL THEN closed	-- unaffected
					ELSE @closeitem 
				END,

			 audit_lastmodifieddate	= GETDATE()
		WHERE 
			id = @id

		SELECT @id AS id	-- send the id back to the calling fxn
			
	END







GO
USE [master]
GO
ALTER DATABASE [coylegroup_surveydb] SET  READ_WRITE 
GO
